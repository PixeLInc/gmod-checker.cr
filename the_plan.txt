The Plan

- My Jumbled Thoughts -
The user goes to the website, main home page pops up with all the fanciness and then they throw in some steam ids into the textarea
and press 'Submit'.
The request goes through client-side validation for the UI in the browser just to make life easier on the server or whatever.

The javascript checks the steam ids by regex matching them out of the text, grabs the matched ones and throws them into an array thingy.
Then, it gets converted into a String split by commas and sent off to the server under the `/check` endpoint using AJAX for a batch request, or websockets.

The server receives the request, and then also does server-side validation on the steam ids just in case it was sent from the API part and not the user friendly UI.
It then converts all incoming Steam IDs into a `Steam::ID` object and partitions the valid ones into a var and the invalid ones into another.
Then, it's time to check the valid steam ids against Steam for sharing.

The best way I can think of to check against Steam is to just to a giant request with every steam id instead of individual requests to Steam.
You would have to send the sharing request to steam all using individual requests since steam doesnt offer a batch one for some reason..
Then, throw all those into an Array or something making sure that the Original steam id and the lending steam id are together so you can tell who is sharing with who.
Then send the names request to steam and grab their names and pictures and such and update the user, or create the user? with the corresponding data you got from it.

This should potentially return SteamUser objects for each user and then throw that into a Class thing and the json should maybe look like:
{
  "results": [
    0: {
      "original": {
        "id": "steam_id",
        "avatar": "url_here"
      },
      // Lender would only be included into the JSON if there is a lender, otherwise it can be excluded.
      "lender": {
        "id": "steam_id",
        "avatar": "gayyyyy"
      }
    }
    1: {}.... and so on.
  ]
}

TLDR:
The user sends a request to the webserver with the IDs
the server then filters out the bad IDs and grabs the names of the valid ones, regardless of if they're sharing or not.
it is then passed on to the check function that checks if the steam ids are in fact sharing
then, it reports back to the user via the UI or JSON depending on how they sent the request.

--- Websocket stuffs | Priority cuz the web based api for other users can come later cuz fuck them kthx.
More worried about just getting the actual website done and then the api for the other peoples can be made

Use a buffer and start loading it up as soon as the user POSTs le ID's to /check and receives a nonce back.
Then, once they connect via web socket and send over the nonce, start throwing things at the user from the buffer, but nicely so they dont leave.
If we don't receive a connection from either A. The users IP (maybe we can track that) or B. if we just don't receive the nonce within ~30 seconds, DELET and stop waiting.

# @channels = {} of Nonce => Channel(SharingResult)
# channel = new_channel(params["ids"].size)

# ids = [] of ID
# params["ids"].each do |raw_id|
#   begin
#     ids << ID.new(raw_id)
#   rescue Steam::ID::Error
#     # immediately send invalid user payload to channel
#   end
# end

# record SharingResult, player : Player, lender : Lender?

# players = client.get_players(ids)
# players.each do |player|
#   lender = get_lender_id(player.id)
#   channel.send SharingResult.new(player, lender)
# end
